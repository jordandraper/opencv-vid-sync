{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Existing solutions: https://github.com/jeorgen/align-videos-by-sound\
Similar goals but different implementations: https://github.com/tp7/Sushi, https://github.com/smacke/ffsubsync, https://github.com/protyposis/AudioAlign\
\
First strategy:\
- extract frames as images using ffmpeg (PNG/JPEG) file and perform comparison on those\
- https://stackoverflow.com/questions/10957412/fastest-way-to-extract-frames-using-ffmpeg\
- learned about temporary file/directory creation in Python\
- inspiration for how to compare two images: https://www.pyimagesearch.com/2014/09/15/python-compare-two-images/\
- https://superuser.com/questions/841872/how-do-i-extract-the-timestamps-associated-with-frames-ffmpeg-extracts-from-a-vi\
- https://superuser.com/questions/1421133/extract-i-frames-to-images-quickly/1421195#1421195\
- https://github.com/kkroening/ffmpeg-python\
- https://docs.opencv.org/2.4/doc/tutorials/highgui/video-input-psnr-ssim/video-input-psnr-ssim.html\
- https://en.wikipedia.org/wiki/Structural_similarity\
\
Second strategy:\
- frames can just be kept in memory as objects and we just keep track of which frame we are dealing with\
- threading can increase speed: https://vuamitom.github.io/2019/12/13/fast-iterate-through-video-frames.html\
- https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/#download-the-code}